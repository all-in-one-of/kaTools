<?xml version="1.0" encoding="UTF-8"?>
<pythonPanelDocument>
  <!-- This file contains definitions of Python interfaces and the
 interfaces menu.  It should not be hand-edited when it is being
 used by the application.  Note, that two definitions of the
 same interface or of the interfaces menu are not allowed
 in a single file. -->
  <interfacesMenu type="panetab">
    <interfaceItem name="sesi_auto_rigs"/>
    <interfaceItem name="sesi_character_picker"/>
    <interfaceItem name="sesi_pose_library"/>
    <interfaceItem name="expressionPicker"/>
  </interfacesMenu>
  <interface name="expressionPicker" label="Expression Picker" icon="MISC_python" help_url="">
    <script><![CDATA[import hou
import toolutils
import addExpression
from PySide2 import QtWidgets, QtCore, QtGui

reload(addExpression)

class expressionTreeWidget(QtWidgets.QTreeWidget):
    def __init__(self, parent=None):
        QtWidgets.QTreeWidget.__init__(self, parent)

        self.setItemsExpandable(True)
        self.setDragEnabled(True)
        self.setDropIndicatorShown(True)
        self.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)
        self.setAlternatingRowColors(True)


    def mouseReleaseEvent(self, event):
        return_val = super( QtWidgets.QTreeWidget, self ).mouseReleaseEvent( event )
        #print "mouse release"
        #print hou.ui.curDesktop().paneTabUnderCursor().type()
        widget = QtWidgets.QApplication.instance().widgetAt(event.globalX(), event.globalY())
        if widget:
            self.searchChildren(widget)
       

    def mouseMoveEvent(self, event):
        #return_val = super( QtWidgets.QTreeWidget, self ).mouseReleaseEvent( event )
        allowDrop = False
        widget = QtWidgets.QApplication.instance().widgetAt(event.globalX(), event.globalY())
        if widget:
            #self.searchChildren(widget)
            pass

    def searchChildren(self, parent):
        for child in parent.children():
                print child
                if child:
                    if isinstance(child, QtGui.QTextFrame):
                        print child.childFrames()
                    self.searchChildren(child)



class pickerWidget(QtWidgets.QFrame):
    def __init__(self, parent = None):
        #super(MyWidget, self).__init__(parent)
        QtWidgets.QFrame.__init__(self, parent)
        
        self.preset = addExpression.wranglePreset(0)
        self.draggedItem = None

        layout = QtWidgets.QVBoxLayout()
    
        # set up tree widget
        self.treeWidget = expressionTreeWidget()
        self.treeWidget.setColumnCount(2)
        self.treeWidget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.treeWidget.setColumnWidth(0, 150)
        #self.treeWidget.setFocusPolicy(QtWidgets.Qt.WheelFocus)
        self.treeWidget.itemPressed.connect(self.onItemPressed)
        self.treeWidget.itemDoubleClicked.connect(self.onItemDoubleClicked)
        

        title = QtWidgets.QLabel('Expression Picker')
        
        layout.addWidget(title)
        layout.addWidget(self.treeWidget)
        self.setLayout(layout)

        menus = self.importExpressionLabels()
        menus = self.importExpressions(menus)
        self.updateTree(menus)



    def onItemPressed(self, item, colmun):
        #print "item pressed"
        self.draggedItem =  item.text(1)

    def onItemDoubleClicked(self, item, column):
        selectecNodes = hou.selectedNodes()
        selectecNode = None
        if len(selectecNodes) == 0:
            return
        selectecNode = selectecNodes[0]
        if selectecNode.type() == hou.sopNodeTypeCategory().nodeTypes()["attribwrangle"]:
            self.draggedItem = item.text(1)
            parmText = selectecNode.parm("snippet").eval()
            selectecNode.parm("snippet").set(parmText + self.draggedItem)



    def importExpressionLabels(self):
        # Reaed Presets
        menus = self.preset.makeMenus()
        #print menus
        return menus

    def importExpressions(self, menus):
        num = len(menus)/2
        for i in range(0, num):
            menus[i*2+1] = self.preset.exportExpression({"selectedlabel" : menus[i*2]})
        return menus


    def updateTree(self, menus):
        # Add expressions to the tree widget
        self.treeWidget.clear()
        try:
            if self.treeWidget.itemChanged is not None:
                self.treeWidget.itemChanged.disconnect()
        except Exception:
            #print Exception
            pass
            
        parent = QtWidgets.QTreeWidgetItem(self.treeWidget)
        parent.setText(0, "sop")
        parent.setExpanded(True)

        font = parent.font(0)
        font.setPointSize(11)
        parent.setFont(0, font)

        brush0 = QtGui.QBrush(QtGui.QColor(0.3,0.3,1))

        num = len(menus)
        child = None
        for i in range(0, num):
            if num%2==0:
                child = QtWidgets.QTreeWidgetItem(parent,[menus[i], menus[i + 1]])
                for column in range(0, child.columnCount()):
                    child.setFont(column, font)
                    #child.setTextAlignment(column, QtCore.Qt.AlignTop)
                    #child.setBackground(column, brush0)
                    #child.setText(0, keys)
            else:
                #child.setText(1, keys)
                pass
            num += 1
        print child.background(0)




def createInterface():
    root = pickerWidget()
    return root]]></script>
    <includeInToolbarMenu menu_position="101" create_separator="false"/>
    <help><![CDATA[]]></help>
  </interface>
  <interface name="sesi_quick_start" label="Quick Start: Calendar Example" icon="MISC_python" help_url="">
    <script><![CDATA[import hou
import addExpression
from PySide2 import QtWidgets, QtCore, QtGui

reload(addExpression)

class expressionTreeWidget(QtWidgets.QTreeWidget):
    def __init__(self, parent=None):
        QtWidgets.QTreeWidget.__init__(self, parent)

        self.setItemsExpandable(True)
        self.setDragEnabled(True)
        self.setDropIndicatorShown(True)
        self.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)
        self.setAlternatingRowColors(True)

    def dropEvent(self, event):
        print "deskp"
        #print hou.ui.curDesktop()

        return_val = super( QtWidgets.QTreeWidget, self ).dropEvent( event )
        print ("Drop finished")
        d = event.mimeData()
        print d, event.source()

        return return_val


class pickerWidget(QtWidgets.QFrame):
    def __init__(self, parent = None):
        #super(MyWidget, self).__init__(parent)
        QtWidgets.QFrame.__init__(self, parent)
        
        self.preset = addExpression.wranglePreset(0)

        layout = QtWidgets.QVBoxLayout()
    
        # set up tree widget
        self.treeWidget = expressionTreeWidget()
        self.treeWidget.setColumnCount(2)
        self.treeWidget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.treeWidget.setColumnWidth(0, 150)
        #self.treeWidget.setColumnWidth(1, 90)
        #self.treeWidget.setFocusPolicy(QtWidgets.Qt.WheelFocus)
        




        title = QtWidgets.QLabel('Expression Picker')
        
        layout.addWidget(title)
        layout.addWidget(self.treeWidget)
        
        self.setLayout(layout)

        menus = self.importExpressionLabels()
        menus = self.importExpressions(menus)
        self.updateTree(menus)



    def importExpressionLabels(self):
        # Reaed Presets
        menus = self.preset.makeMenus()
        #print menus
        return menus

    def importExpressions(self, menus):
        num = len(menus)/2
        for i in range(0, num):
            menus[i*2+1] = self.preset.exportExpression({"selectedlabel" : menus[i*2]})
        return menus


    def updateTree(self, menus):
        # Add expressions to the tree widget
        self.treeWidget.clear()
        try:
            if self.treeWidget.itemChanged is not None:
                self.treeWidget.itemChanged.disconnect()
        except Exception:
            #print Exception
            pass
            
        parent = QtWidgets.QTreeWidgetItem(self.treeWidget)
        parent.setText(0, "sop")
        parent.setExpanded(True)

        font = parent.font(0)
        font.setPointSize(11)
        parent.setFont(0, font)

        brush0 = QtGui.QBrush(QtGui.QColor(0.3,0.3,1))

        num = len(menus)
        child = None
        for i in range(0, num):
            if num%2==0:
                child = QtWidgets.QTreeWidgetItem(parent,[menus[i], menus[i + 1]])
                for column in range(0, child.columnCount()):
                    child.setFont(column, font)
                    #child.setTextAlignment(column, QtCore.Qt.AlignTop)
                    #child.setBackground(column, brush0)
                    #child.setText(0, keys)
            else:
                #child.setText(1, keys)
                pass
            num += 1
        print child.background(0)




def createInterface():
    root = pickerWidget()
    return root]]></script>
    <includeInToolbarMenu menu_position="100" create_separator="false"/>
    <help><![CDATA[]]></help>
  </interface>
</pythonPanelDocument>
